{"version":3,"sources":["components/Header.js","context.js","components/Addtodo.js","components/Todo.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Context","React","createContext","reducer","prevState","action","type","todos","map","t","_id","payload","complete","filter","todo","Provider","state","dispatch","setState","axios","get","then","res","data","value","this","props","children","Component","Consumer","Addtodo","id","title","update","e","target","add","preventDefault","newTodo","post","onSubmit","bind","placeholder","onChange","Todo","style","textDecoration","toggle","remove","delete","onClick","Todos","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fecaa58e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"card bg-info text-center text-light rounded-0\">\r\n      <h1 className=\"display-4\">\r\n        <i className=\"fas fa-clipboard-list mr-3\"></i>{' '}\r\n        <span className=\"text-dark mr-3\">MERN</span>Todo App\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (prevState, action) => {\r\n  switch (action.type) {\r\n    case 'TOGGLE':\r\n      return {\r\n        todos: prevState.todos.map((t) => {\r\n          if (t._id === action.payload) {\r\n            t.complete = !t.complete;\r\n          }\r\n          return t;\r\n        }),\r\n      };\r\n    case 'REMOVE':\r\n      return {\r\n        todos: prevState.todos.filter((todo) => todo._id !== action.payload),\r\n      };\r\n    case 'ADD':\r\n      return {\r\n        todos: [...prevState.todos, action.payload],\r\n      };\r\n    default:\r\n      return prevState;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    todos: [],\r\n    dispatch: (action) =>\r\n      this.setState((prevState) => reducer(prevState, action)),\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get('/api/todos').then((res) => this.setState({ todos: res.data }));\r\n  }\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Consumer } from '../context';\r\nexport default class Addtodo extends Component {\r\n  state = {\r\n    id: 4,\r\n    title: '',\r\n    complete: false,\r\n  };\r\n\r\n  update = (e) => {\r\n    this.setState({\r\n      title: e.target.value,\r\n    });\r\n  };\r\n\r\n  add = (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const newTodo = this.state;\r\n    axios\r\n      .post('/api/todos', newTodo)\r\n      .then((res) => dispatch({ type: 'ADD', payload: res.data }));\r\n    this.setState({ title: '' });\r\n  };\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <form onSubmit={this.add.bind(this, dispatch)}>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control rounded-0\"\r\n                placeholder=\"Write your todo here...\"\r\n                onChange={this.update}\r\n                value={this.state.title}\r\n              />\r\n              <button\r\n                className=\"form-control rounded-0 btn-secondary\"\r\n                type=\"submit\"\r\n              >\r\n                Add Todo\r\n              </button>\r\n            </form>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { Consumer } from '../context';\r\nimport axios from 'axios';\r\n\r\nexport default class Todo extends Component {\r\n  style = () => {\r\n    const { complete } = this.props.todo;\r\n    return { textDecoration: complete ? 'line-through' : 'none' };\r\n  };\r\n\r\n  toggle = (id, dispatch) => {\r\n    dispatch({ type: 'TOGGLE', payload: id });\r\n  };\r\n  remove = (id, dispatch) => {\r\n    axios\r\n      .delete(`/api/todos/${id}`)\r\n      .then(() => dispatch({ type: 'REMOVE', payload: id }));\r\n  };\r\n  render() {\r\n    const { title, _id } = this.props.todo;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <h3\r\n              className=\"text-dark text-center p-1 bg-light border-bottom\"\r\n              style={this.style()}\r\n            >\r\n              <i\r\n                className=\"far fa-times-circle fa-sm float-left m-1 text-danger\"\r\n                onClick={this.remove.bind(this, _id, dispatch)}\r\n              ></i>\r\n              {title}\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"m-2 float-right\"\r\n                onChange={this.toggle.bind(this, _id, dispatch)}\r\n              />\r\n            </h3>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport { Consumer } from '../context';\r\n\r\nexport default class Todos extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { todos } = value;\r\n          return todos.map((t) => <Todo todo={t} key={t.id}></Todo>);\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Addtodo from './components/Addtodo';\nimport Todos from './components/Todos';\n\nimport { Provider } from './context';\n\nfunction App() {\n  return (\n    <Provider>\n      <div className=\"app-container\">\n        <Header></Header>\n        <Addtodo></Addtodo>\n        <Todos></Todos>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}